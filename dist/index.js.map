{
  "version": 3,
  "sources": ["../lib/validate.js", "../lib/print.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar contains = require( '@stdlib/assert-contains' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar ALTERNATIVE = [\n\t'two-sided',\n\t'less',\n\t'greater'\n];\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis\n* @param {number} [options.mu] - mean under `H0`\n* @returns {(null|Error)} null or an error object\n*\n* @example\n* var options = {\n*     'alpha': 0.05\n* };\n* var opts = {};\n*\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option must be a number on the interval: [0, 1]. Option: `%f`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'alternative', opts.alternative ) );\n\t\t}\n\t\tif ( !contains( ALTERNATIVE, opts.alternative ) ) {\n\t\t\treturn new Error( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'alternative', ALTERNATIVE.join( '\", \"' ), opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'mu' ) ) {\n\t\topts.mu = options.mu;\n\t\tif ( !isNumber( opts.mu ) || isnan( opts.mu ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'mu', opts.mu ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar roundn = require( '@stdlib/math-base-special-roundn' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tif ( this.method === 'Paired t-test' ) {\n\t\tstr += 'True difference in means is ';\n\t} else {\n\t\tstr += 'True mean is ';\n\t}\n\tswitch ( this.alternative ) {\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    df: ' + this.df + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumberArray = require( '@stdlib/assert-is-number-array' ).primitives;\nvar isTypedArrayLike = require( '@stdlib/assert-is-typed-array-like' );\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar tCDF = require( '@stdlib/stats-base-dists-t-cdf' );\nvar tQuantile = require( '@stdlib/stats-base-dists-t-quantile' );\nvar format = require( '@stdlib/string-format' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar mean = require( '@stdlib/stats-strided-mean' );\nvar variance = require( '@stdlib/stats-base-variance' );\nvar gcopy = require( '@stdlib/blas-base-gcopy' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar Float64Array = require( '@stdlib/array-float64' );\nvar validate = require( './validate.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Computes a one-sample or paired Student's t test.\n*\n* @param {NumericArray} x - input array\n* @param {NumericArray} [y] - optional paired array\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less`, or `greater`)\n* @param {number} [options.mu=0.0] - mean under `H0`\n* @throws {TypeError} first argument must be a numeric array\n* @throws {Error} first argument must contain at least two elements\n* @throws {Error} paired array must have the same length as the first argument\n* @throws {TypeError} second argument must be either a numeric array or an options object\n* @throws {TypeError} `alpha` option must be number\n* @throws {RangeError} `alpha` option must be reside along the interval `[0,1]`\n* @throws {TypeError} `alternative` option must be a recognized option value (`two-sided`, `less`, or `greater`)\n* @throws {TypeError} `mu` option must be a number\n* @returns {Object} test results\n*\n* @example\n* var x = [ 4.0, 4.0, 6.0, 6.0, 5.0 ];\n* var opts = {\n*     'mu': 5.0\n* };\n* var out = ttest( x, opts );\n* // returns {...}\n*\n* @example\n* var x = [ 4.0, 4.0, 6.0, 6.0, 5.0 ];\n* var opts = {\n*     'alternative': 'greater'\n* };\n* var out = ttest( x, opts );\n* // returns {...}\n*/\nfunction ttest( x ) {\n\tvar stderr;\n\tvar xmean;\n\tvar cint;\n\tvar pval;\n\tvar opts;\n\tvar stat;\n\tvar err;\n\tvar len;\n\tvar out;\n\tvar df;\n\tvar tq;\n\tvar y;\n\tvar i;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a numeric array. Value: `%s`.', x ) );\n\t}\n\tlen = x.length;\n\tif ( len < 2 ) {\n\t\tthrow new Error( format( 'invalid argument. First argument must contain at least two elements. Value: `%s`.', x ) );\n\t}\n\topts = {\n\t\t'mu': 0.0,\n\t\t'alpha': 0.05,\n\t\t'alternative': 'two-sided'\n\t};\n\tif ( arguments.length === 2 ) {\n\t\tif ( isObject( arguments[ 1 ] ) ) {\n\t\t\terr = validate( opts, arguments[ 1 ] );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t} else {\n\t\t\ty = arguments[ 1 ];\n\t\t\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either a numeric array or an options object. Value: `%s`.', y ) );\n\t\t\t}\n\t\t}\n\t} else if ( arguments.length > 2 ) {\n\t\ty = arguments[ 1 ];\n\t\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a numeric array. Value: `%s`.', y ) );\n\t\t}\n\t\terr = validate( opts, arguments[ 2 ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( y ) {\n\t\tif ( y.length !== len ) {\n\t\t\tthrow new Error( 'invalid arguments. First and second arguments must have the same length.' );\n\t\t}\n\t\tx = gcopy( len, x, 1, new Float64Array( len ), 1 );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tx[ i ] -= y[ i ];\n\t\t}\n\t}\n\tstderr = sqrt( variance( len, 1, x, 1 ) / len ); // TODO: replace with base/sem\n\txmean = mean( len, x, 1 ); // TODO: ideally, we would get both the sem and the mean from the same function and without needing to traverse 3-4 times\n\tstat = ( xmean-opts.mu ) / stderr;\n\tdf = len - 1;\n\tif ( opts.alternative === 'two-sided' ) {\n\t\tpval = 2.0 * tCDF( -abs(stat), df );\n\t\ttq = tQuantile( 1.0-(opts.alpha/2.0), df );\n\t\tcint = [\n\t\t\topts.mu + ( (stat-tq)*stderr ),\n\t\t\topts.mu + ( (stat+tq)*stderr )\n\t\t];\n\t} else if ( opts.alternative === 'greater' ) {\n\t\tpval = 1.0 - tCDF( stat, df );\n\t\ttq = tQuantile( 1.0-opts.alpha, df );\n\t\tcint = [\n\t\t\topts.mu + ( (stat-tq)*stderr ),\n\t\t\tPINF\n\t\t];\n\t} else { // opts.alternative === 'less'\n\t\tpval = tCDF( stat, df );\n\t\ttq = tQuantile( 1.0-opts.alpha, df );\n\t\tcint = [\n\t\t\tNINF,\n\t\t\topts.mu + ( (stat+tq)*stderr )\n\t\t];\n\t}\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= opts.alpha );\n\tsetReadOnly( out, 'alpha', opts.alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'df', df );\n\tsetReadOnly( out, 'nullValue', opts.mu );\n\tsetReadOnly( out, 'mean', xmean );\n\tsetReadOnly( out, 'sd', stderr );\n\tsetReadOnly( out, 'alternative', opts.alternative );\n\tsetReadOnly( out, 'method', ( y ) ? 'Paired t-test' : 'One-sample t-test' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ttest;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a one-sample Student's t-Test.\n*\n* @module @stdlib/stats-ttest\n*\n* @example\n* var normal = require( '@stdlib/random-base-normal' ).factory;\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ttest = require( '@stdlib/stats-ttest' );\n*\n* var rnorm;\n* var out;\n* var i;\n* var x;\n* var y;\n*\n* rnorm = normal( 1.0, 2.0, {\n*     'seed': 786\n* });\n*\n* // One-sample t-test:\n* x = new Float64Array( 100 );\n* for ( i = 0; i < x.length; i++ ) {\n*     x[ i ] = rnorm();\n* }\n* out = ttest( x );\n*\n* // Paired t-test:\n* x = new Float64Array( 100 );\n* y = new Float64Array( 100 );\n* for ( i = 0; i < x.length; i++ ) {\n*     x[ i ] = rnorm();\n*     y[ i ] = rnorm();\n* }\n* out = ttest( x, y );\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_validate", "__commonJSMin", "exports", "module", "isNumber", "isObject", "isString", "isnan", "hasOwnProp", "contains", "format", "ALTERNATIVE", "validate", "opts", "options", "require_print", "__commonJSMin", "exports", "module", "isPositiveInteger", "isObject", "isBoolean", "hasOwnProp", "roundn", "format", "print", "opts", "decision", "dgts", "str", "require_main", "__commonJSMin", "exports", "module", "isNumberArray", "isTypedArrayLike", "setReadOnly", "isObject", "tCDF", "tQuantile", "format", "sqrt", "abs", "mean", "variance", "gcopy", "NINF", "PINF", "Float64Array", "validate", "print", "ttest", "x", "stderr", "xmean", "cint", "pval", "opts", "stat", "err", "len", "out", "df", "tq", "y", "i", "main"]
}
