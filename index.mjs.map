{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/print.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport contains from '@stdlib/assert-contains';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar ALTERNATIVE = [\n\t'two-sided',\n\t'less',\n\t'greater'\n];\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis\n* @param {number} [options.mu] - mean under `H0`\n* @returns {(null|Error)} null or an error object\n*\n* @example\n* var options = {\n*     'alpha': 0.05\n* };\n* var opts = {};\n*\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '1Lr2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( '1Lr8P', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( format( '1Lr8V', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( '1Lr2W', 'alternative', opts.alternative ) );\n\t\t}\n\t\tif ( !contains( ALTERNATIVE, opts.alternative ) ) {\n\t\t\treturn new Error( format( '1Lr4S', 'alternative', ALTERNATIVE.join( '\", \"' ), opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'mu' ) ) {\n\t\topts.mu = options.mu;\n\t\tif ( !isNumber( opts.mu ) || isnan( opts.mu ) ) {\n\t\t\treturn new TypeError( format( '1Lr8P', 'mu', opts.mu ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/assert-is-positive-integer';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport roundn from '@stdlib/math-base-special-roundn';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( '1Lr3L', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( '1Lr3P', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( '1Lr2o', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tif ( this.method === 'Paired t-test' ) {\n\t\tstr += 'True difference in means is ';\n\t} else {\n\t\tstr += 'True mean is ';\n\t}\n\tswitch ( this.alternative ) {\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    df: ' + this.df + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { primitives as isNumberArray } from '@stdlib/assert-is-number-array';\nimport isTypedArrayLike from '@stdlib/assert-is-typed-array-like';\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport tCDF from '@stdlib/stats-base-dists-t-cdf';\nimport tQuantile from '@stdlib/stats-base-dists-t-quantile';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport mean from '@stdlib/stats-base-mean';\nimport variance from '@stdlib/stats-base-variance';\nimport gcopy from '@stdlib/blas-base-gcopy';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport Float64Array from '@stdlib/array-float64';\nimport validate from './validate.js';\nimport print from './print.js'; // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Computes a one-sample or paired Student's t test.\n*\n* @param {NumericArray} x - input array\n* @param {NumericArray} [y] - optional paired array\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less`, or `greater`)\n* @param {number} [options.mu=0.0] - mean under `H0`\n* @throws {TypeError} first argument must be a numeric array\n* @throws {Error} first argument must contain at least two elements\n* @throws {Error} paired array must have the same length as the first argument\n* @throws {TypeError} second argument must be either a numeric array or an options object\n* @throws {TypeError} `alpha` option must be number\n* @throws {RangeError} `alpha` option must be reside along the interval `[0,1]`\n* @throws {TypeError} `alternative` option must be a recognized option value (`two-sided`, `less`, or `greater`)\n* @throws {TypeError} `mu` option must be a number\n* @returns {Object} test results\n*\n* @example\n* var x = [ 4.0, 4.0, 6.0, 6.0, 5.0 ];\n* var opts = {\n*     'mu': 5.0\n* };\n* var out = ttest( x, opts );\n* // returns {...}\n*\n* @example\n* var x = [ 4.0, 4.0, 6.0, 6.0, 5.0 ];\n* var opts = {\n*     'alternative': 'greater'\n* };\n* var out = ttest( x, opts );\n* // returns {...}\n*/\nfunction ttest( x ) {\n\tvar stderr;\n\tvar xmean;\n\tvar cint;\n\tvar pval;\n\tvar opts;\n\tvar stat;\n\tvar err;\n\tvar len;\n\tvar out;\n\tvar df;\n\tvar tq;\n\tvar y;\n\tvar i;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( '1Lr8R', x ) );\n\t}\n\tlen = x.length;\n\tif ( len < 2 ) {\n\t\tthrow new Error( format( '1LrA2', x ) );\n\t}\n\topts = {\n\t\t'mu': 0.0,\n\t\t'alpha': 0.05,\n\t\t'alternative': 'two-sided'\n\t};\n\tif ( arguments.length === 2 ) {\n\t\tif ( isObject( arguments[ 1 ] ) ) {\n\t\t\terr = validate( opts, arguments[ 1 ] );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t} else {\n\t\t\ty = arguments[ 1 ];\n\t\t\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\t\t\tthrow new TypeError( format( '1LrA3', y ) );\n\t\t\t}\n\t\t}\n\t} else if ( arguments.length > 2 ) {\n\t\ty = arguments[ 1 ];\n\t\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\t\tthrow new TypeError( format( '1Lr9k', y ) );\n\t\t}\n\t\terr = validate( opts, arguments[ 2 ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( y ) {\n\t\tif ( y.length !== len ) {\n\t\t\tthrow new Error( format('1Lr1E') );\n\t\t}\n\t\tx = gcopy( len, x, 1, new Float64Array( len ), 1 );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tx[ i ] -= y[ i ];\n\t\t}\n\t}\n\tstderr = sqrt( variance( len, 1, x, 1 ) / len ); // TODO: replace with base/sem\n\txmean = mean( len, x, 1 ); // TODO: ideally, we would get both the sem and the mean from the same function and without needing to traverse 3-4 times\n\tstat = ( xmean-opts.mu ) / stderr;\n\tdf = len - 1;\n\tif ( opts.alternative === 'two-sided' ) {\n\t\tpval = 2.0 * tCDF( -abs(stat), df );\n\t\ttq = tQuantile( 1.0-(opts.alpha/2.0), df );\n\t\tcint = [\n\t\t\topts.mu + ( (stat-tq)*stderr ),\n\t\t\topts.mu + ( (stat+tq)*stderr )\n\t\t];\n\t} else if ( opts.alternative === 'greater' ) {\n\t\tpval = 1.0 - tCDF( stat, df );\n\t\ttq = tQuantile( 1.0-opts.alpha, df );\n\t\tcint = [\n\t\t\topts.mu + ( (stat-tq)*stderr ),\n\t\t\tPINF\n\t\t];\n\t} else { // opts.alternative === 'less'\n\t\tpval = tCDF( stat, df );\n\t\ttq = tQuantile( 1.0-opts.alpha, df );\n\t\tcint = [\n\t\t\tNINF,\n\t\t\topts.mu + ( (stat+tq)*stderr )\n\t\t];\n\t}\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= opts.alpha );\n\tsetReadOnly( out, 'alpha', opts.alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'df', df );\n\tsetReadOnly( out, 'nullValue', opts.mu );\n\tsetReadOnly( out, 'mean', xmean );\n\tsetReadOnly( out, 'sd', stderr );\n\tsetReadOnly( out, 'alternative', opts.alternative );\n\tsetReadOnly( out, 'method', ( y ) ? 'Paired t-test' : 'One-sample t-test' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default ttest;\n"],"names":["ALTERNATIVE","validate","opts","options","isObject","TypeError","format","hasOwnProp","alpha","isNumber","isnan","RangeError","alternative","isString","contains","Error","join","mu","print","decision","dgts","str","arguments","length","isPositiveInteger","digits","isBoolean","this","method","nullValue","roundn","pValue","statistic","df","ci","rejected","ttest","x","stderr","xmean","cint","pval","stat","err","len","out","tq","y","i","isTypedArrayLike","isNumberArray","gcopy","Float64Array","sqrt","variance","mean","tCDF","abs","tQuantile","PINF","NINF","setReadOnly"],"mappings":"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"}