{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/print.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar contains = require( '@stdlib/assert-contains' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar ALTERNATIVE = [\n\t'two-sided',\n\t'less',\n\t'greater'\n];\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis\n* @param {number} [options.mu] - mean under `H0`\n* @returns {(null|Error)} null or an error object\n*\n* @example\n* var options = {\n*     'alpha': 0.05\n* };\n* var opts = {};\n*\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option must be between `0` and `1` (inclusive). Option: `%f`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'alternative', opts.alternative ) );\n\t\t}\n\t\tif ( !contains( ALTERNATIVE, opts.alternative ) ) {\n\t\t\treturn new Error( format( 'invalid option. `%s` option must be one of the following: `%s`.', 'alternative', ALTERNATIVE.join( ', ' ) ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'mu' ) ) {\n\t\topts.mu = options.mu;\n\t\tif ( !isNumber( opts.mu ) || isnan( opts.mu ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'mu', opts.mu ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar roundn = require( '@stdlib/math-base-special-roundn' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an options object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tif ( this.method === 'Paired t-test' ) {\n\t\tstr += 'True difference in means is ';\n\t} else {\n\t\tstr += 'True mean is ';\n\t}\n\tswitch ( this.alternative ) {\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    df: ' + this.df + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumberArray = require( '@stdlib/assert-is-number-array' ).primitives;\nvar isTypedArrayLike = require( '@stdlib/assert-is-typed-array-like' );\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar tCDF = require( '@stdlib/stats-base-dists-t-cdf' );\nvar tQuantile = require( '@stdlib/stats-base-dists-t-quantile' );\nvar format = require( '@stdlib/string-format' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar mean = require( '@stdlib/stats-base-mean' );\nvar variance = require( '@stdlib/stats-base-variance' );\nvar gcopy = require( '@stdlib/blas-base-gcopy' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar Float64Array = require( '@stdlib/array-float64' );\nvar validate = require( './validate.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Computes a one-sample or paired Student's t test.\n*\n* @param {NumericArray} x - input array\n* @param {NumericArray} [y] - optional paired array\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less`, or `greater`)\n* @param {number} [options.mu=0.0] - mean under `H0`\n* @throws {TypeError} first argument must be a numeric array\n* @throws {Error} first argument must have at least two elements\n* @throws {Error} paired array must have the same length as the first argument\n* @throws {TypeError} second argument must be either a numeric array or an options object\n* @throws {TypeError} `alpha` option must be number\n* @throws {RangeError} `alpha` option must be reside along the interval `[0,1]`\n* @throws {TypeError} `alternative` option must be a recognized option value (`two-sided`, `less`, or `greater`)\n* @throws {TypeError} `mu` option must be a number\n* @returns {Object} test results\n*\n* @example\n* var x = [ 4.0, 4.0, 6.0, 6.0, 5.0 ];\n* var opts = {\n*     'mu': 5.0\n* };\n* var out = ttest( x, opts );\n* // returns {...}\n*\n* @example\n* var x = [ 4.0, 4.0, 6.0, 6.0, 5.0 ];\n* var opts = {\n*     'alternative': 'greater'\n* };\n* var out = ttest( x, opts );\n* // returns {...}\n*/\nfunction ttest( x ) {\n\tvar stderr;\n\tvar xmean;\n\tvar cint;\n\tvar pval;\n\tvar opts;\n\tvar stat;\n\tvar err;\n\tvar len;\n\tvar out;\n\tvar df;\n\tvar tq;\n\tvar y;\n\tvar i;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a numeric array. Value: `%s`.', x ) );\n\t}\n\tlen = x.length;\n\tif ( len < 2 ) {\n\t\tthrow new Error( format( 'invalid argument. First argument must have at least two elements. Value: `%s`.', x ) );\n\t}\n\topts = {\n\t\t'mu': 0.0,\n\t\t'alpha': 0.05,\n\t\t'alternative': 'two-sided'\n\t};\n\tif ( arguments.length === 2 ) {\n\t\tif ( isObject( arguments[ 1 ] ) ) {\n\t\t\terr = validate( opts, arguments[ 1 ] );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t} else {\n\t\t\ty = arguments[ 1 ];\n\t\t\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either a numeric array or an options object. Value: `%s`.', y ) );\n\t\t\t}\n\t\t}\n\t} else if ( arguments.length > 2 ) {\n\t\ty = arguments[ 1 ];\n\t\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a numeric array. Value: `%s`.', y ) );\n\t\t}\n\t\terr = validate( opts, arguments[ 2 ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( y ) {\n\t\tif ( y.length !== len ) {\n\t\t\tthrow new Error( 'invalid arguments. The first and second arguments must have the same length.' );\n\t\t}\n\t\tx = gcopy( len, x, 1, new Float64Array( len ), 1 );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tx[ i ] -= y[ i ];\n\t\t}\n\t}\n\tstderr = sqrt( variance( len, 1, x, 1 ) / len ); // TODO: replace with base/sem\n\txmean = mean( len, x, 1 ); // TODO: ideally, we would get both the sem and the mean from the same function and without needing to traverse 3-4 times\n\tstat = ( xmean-opts.mu ) / stderr;\n\tdf = len - 1;\n\tif ( opts.alternative === 'two-sided' ) {\n\t\tpval = 2.0 * tCDF( -abs(stat), df );\n\t\ttq = tQuantile( 1.0-(opts.alpha/2.0), df );\n\t\tcint = [\n\t\t\topts.mu + ( (stat-tq)*stderr ),\n\t\t\topts.mu + ( (stat+tq)*stderr )\n\t\t];\n\t} else if ( opts.alternative === 'greater' ) {\n\t\tpval = 1.0 - tCDF( stat, df );\n\t\ttq = tQuantile( 1.0-opts.alpha, df );\n\t\tcint = [\n\t\t\topts.mu + ( (stat-tq)*stderr ),\n\t\t\tPINF\n\t\t];\n\t} else { // opts.alternative === 'less'\n\t\tpval = tCDF( stat, df );\n\t\ttq = tQuantile( 1.0-opts.alpha, df );\n\t\tcint = [\n\t\t\tNINF,\n\t\t\topts.mu + ( (stat+tq)*stderr )\n\t\t];\n\t}\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= opts.alpha );\n\tsetReadOnly( out, 'alpha', opts.alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'df', df );\n\tsetReadOnly( out, 'nullValue', opts.mu );\n\tsetReadOnly( out, 'mean', xmean );\n\tsetReadOnly( out, 'sd', stderr );\n\tsetReadOnly( out, 'alternative', opts.alternative );\n\tsetReadOnly( out, 'method', ( y ) ? 'Paired t-test' : 'One-sample t-test' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ttest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a one-sample Student's t-Test.\n*\n* @module @stdlib/stats-ttest\n*\n* @example\n* var normal = require( '@stdlib/random-base-normal' ).factory;\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ttest = require( '@stdlib/stats-ttest' );\n*\n* var rnorm;\n* var out;\n* var i;\n* var x;\n* var y;\n*\n* rnorm = normal( 1.0, 2.0, {\n*     'seed': 786\n* });\n*\n* // One-sample t-test:\n* x = new Float64Array( 100 );\n* for ( i = 0; i < x.length; i++ ) {\n*     x[ i ] = rnorm();\n* }\n* out = ttest( x );\n*\n* // Paired t-test:\n* x = new Float64Array( 100 );\n* y = new Float64Array( 100 );\n* for ( i = 0; i < x.length; i++ ) {\n*     x[ i ] = rnorm();\n*     y[ i ] = rnorm();\n* }\n* out = ttest( x, y );\n*/\n\n// MODULES //\n\nvar ttest = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = ttest;\n"],"names":["isNumber","require$$0","isPrimitive","isObject","require$$1","isString","require$$2","isnan","require$$3","hasOwnProp","require$$4","contains","require$$5","format","require$$6","ALTERNATIVE","validate_1","opts","options","TypeError","alpha","RangeError","alternative","Error","join","mu","isPositiveInteger","isBoolean","roundn","print_1","decision","dgts","str","arguments","length","digits","this","method","nullValue","pValue","statistic","df","ci","rejected","isNumberArray","primitives","isTypedArrayLike","setReadOnly","tCDF","tQuantile","sqrt","require$$7","abs","require$$8","mean","require$$9","variance","require$$10","gcopy","require$$11","NINF","require$$12","PINF","require$$13","Float64Array","require$$14","validate","require$$15","print","require$$16","lib","x","stderr","xmean","cint","pval","stat","err","len","out","tq","y","i"],"mappings":"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"}